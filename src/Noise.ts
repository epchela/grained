import * as Types from './types';

export class Noise {
  private static getRule(noiseImg: string, grainChaos: number, grainSpeed: number): string {
    return `
      content: "";
      position: absolute;
      top: -100%;
      left: -100%;
      width: 300%;
      height: 300%;
      background-image: url(${noiseImg});
      animation-name:grained;
      animation-iteration-count: infinite;
      animation-duration: ${grainChaos}s;
      animation-timing-function: steps(${grainSpeed}, end);
    `;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å "—à—É–º–æ–º" –∏–∑ –∫–∞–Ω–≤–∞—Å–∞
  private static generateNoise(options: Types.Options): string {
    const canvas = document.createElement('canvas'); // —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
    const ctx = canvas.getContext('2d'); // –∑–∞–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

    if (ctx === null) return '';

    canvas.width = options.patternWidth;
    canvas.height = options.patternHeight;

    // ~~~***~~~
    // –û–ü–ò–°–ê–ù–ò–ï –ò–¢–ï–†–ê–¶–ò–ò
    // –û–±—â–µ–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ü–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è "–Ω–æ–π–∑" (–∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç –∏ —Ä–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
    // --- //
    // width –∏ height —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ grainDensity –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
    // --- //
    // width –∏ height —è–≤–ª—è—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (x, y) –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞,
    // –∞ grainWidth –∏ grainHeight - —Ä–∞–∑–º–µ—Ä–∞–º–∏
    // ~~~***~~~
    for (let width = 0; width < options.patternWidth; width += options.grainDensity) {
      for (let height = 0; height < options.patternHeight; height += options.grainDensity) {
        const rgb = Math.floor(Math.random() * 256);
        ctx.fillStyle = `rgba(${[rgb, rgb, rgb, options.grainOpacity].join()})`;
        ctx.fillRect(width, height, options.grainWidth, options.grainHeight);
      }
    }

    return canvas.toDataURL('image/png');
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ–º css —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Å–µ–≤–¥–æ-—ç–ª–µ–º–µ–Ω—Ç–∞
   * @param {StyleSheet} sheet
   * @param {string} selector - —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
   * @param {string} rules - css —Å—Ç–∏–ª–∏
   */
  private static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {
    let rule: string;

    if (selector.length) {
      rule = `${selector}{${rules}}`;
    } else {
      rule = rules;
    }

    sheet.insertRule(rule);
  }

  private static isExist(selector: string): void {
    // –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Å—Ç–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º.
    // –ù–æ —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ üêº
    const styleAdded = document.querySelector(`#grained-animation__${selector}`);

    if (styleAdded && styleAdded.parentElement) {
      styleAdded.parentElement.removeChild(styleAdded);
    }
  }

  private static createStyle(selector: string): HTMLStyleElement {
    // –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç style
    const style = document.createElement('style');
    style.id = `grained-animation__${selector}`;
    document.body.appendChild(style);

    return style;
  }

  static add(selector: string, options: Types.Options): void {
    this.isExist(selector);

    const style = this.createStyle(selector);
    const sheet = style.sheet!;
    const rule = this.getRule(
      this.generateNoise(options),
      options.grainChaos,
      options.grainSpeed,
    );

    this.addCSSRule(sheet, `${selector}::before`, rule);
  }
}

export default Noise;
